name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Backend Testing and Build
  backend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'backend/requirements.txt'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run backend tests
      run: |
        pytest -v --tb=short --cov=. --cov-report=xml
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
    
    - name: Test backend startup
      run: |
        python -c "
        import uvicorn
        from main import app
        import threading
        import time
        import requests
        import sys
        
        def start_server():
            uvicorn.run(app, host='127.0.0.1', port=8000, log_level='critical')
        
        # Start server in background
        server_thread = threading.Thread(target=start_server, daemon=True)
        server_thread.start()
        
        # Wait for server to start
        time.sleep(3)
        
        try:
            response = requests.get('http://127.0.0.1:8000/health', timeout=5)
            if response.status_code == 200:
                print('‚úÖ Backend started successfully')
                sys.exit(0)
            else:
                print(f'‚ùå Backend health check failed: {response.status_code}')
                sys.exit(1)
        except Exception as e:
            print(f'‚ùå Backend startup failed: {e}')
            sys.exit(1)
        "

  # Frontend Testing and Build
  frontend-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run ESLint
      run: npm run lint
    
    - name: Run frontend tests
      run: npm test -- --coverage --watchAll=false --passWithNoTests
    
    - name: Build frontend
      run: npm run build
      env:
        NEXT_PUBLIC_API_URL: http://localhost:8000
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/.next
        retention-days: 7

  # Security and Quality Checks
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker Build Test
  docker-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: polycraft-backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: polycraft-frontend:test
        build-args: |
          NEXT_PUBLIC_API_URL=http://localhost:8000
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Test Docker Compose configuration
      run: |
        docker-compose -f docker-compose.yml config
        echo "‚úÖ Docker Compose configuration is valid"

  # Performance and E2E Testing
  e2e-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Install Cypress dependencies
      run: |
        cd frontend
        npm install cypress --save-dev
    
    - name: Run Cypress E2E tests
      uses: cypress-io/github-action@v6
      with:
        working-directory: frontend
        start: npm run dev
        wait-on: 'http://localhost:3005'
        wait-on-timeout: 120
        browser: chrome
        headless: true
      env:
        CYPRESS_baseUrl: http://localhost:3005

  # Deployment (only on master branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-test, security-scan]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy to Vercel (Frontend)
      if: env.VERCEL_TOKEN != ''
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        production: true
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
    
    - name: Deploy Backend to Railway
      if: env.RAILWAY_TOKEN != ''
      run: |
        echo "üöÄ Backend deployment triggered to Railway"
        # Railway auto-deploys on push to master when connected
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Create deployment summary
      run: |
        echo "## üöÄ Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ‚úÖ Successfully Deployed" >> $GITHUB_STEP_SUMMARY
        echo "- **Frontend**: https://poly-craft.vercel.app" >> $GITHUB_STEP_SUMMARY
        echo "- **Backend**: Railway Auto-Deploy" >> $GITHUB_STEP_SUMMARY
        echo "- **API Docs**: Backend URL + /docs" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìä Build Info" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always() && github.ref == 'refs/heads/master'
    
    steps:
    - name: Notify success
      if: needs.deploy.result == 'success'
      run: |
        echo "üéâ PolyCraft deployment completed successfully!"
        echo "Frontend: https://poly-craft.vercel.app"
    
    - name: Notify failure
      if: needs.deploy.result == 'failure'
      run: |
        echo "‚ùå PolyCraft deployment failed. Check logs for details."
        exit 1