name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

jobs:
  # Backend Testing and Build
  backend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
    
    - name: Install backend dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio httpx
    
    - name: Run backend tests
      run: |
        cd backend
        pytest -v --tb=short
    
    - name: Test backend startup
      run: |
        cd backend
        timeout 30 python -c "
        import uvicorn
        from main import app
        import asyncio
        import signal
        import sys
        
        def handler(signum, frame):
            sys.exit(0)
        
        signal.signal(signal.SIGALRM, handler)
        signal.alarm(10)  # 10 second timeout
        
        try:
            uvicorn.run(app, host='0.0.0.0', port=8000, log_level='info')
        except SystemExit:
            print('Backend started successfully')
        "

  # Frontend Testing and Build
  frontend-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
    
    - name: Run ESLint
      run: |
        cd frontend
        npm run lint
    
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/.next
        retention-days: 7

  # Docker Build Test
  docker-test:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend Docker image
      run: |
        cd backend
        docker build -t polycraft-backend:test .
    
    - name: Build frontend Docker image
      run: |
        cd frontend
        docker build -t polycraft-frontend:test .
    
    - name: Test Docker Compose
      run: |
        docker-compose -f docker-compose.yml config

  # Deployment (only on master branch)
  deploy:
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, docker-test]
    if: github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Vercel (Frontend)
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./frontend
        production: true

    - name: Notify deployment success
      run: |
        echo "ðŸš€ Deployment completed successfully!"
        echo "Frontend: https://poly-craft.vercel.app"